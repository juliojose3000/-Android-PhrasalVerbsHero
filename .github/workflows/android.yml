name: Android CI/CD

on:
  push:
    branches:
      - main
      - release/v*
      - tests/v*
  pull_request:
    branches: [ "*" ]

jobs:
  build_apk:
    name: 🔧 Build APK
    runs-on: ubuntu-latest

    env:
      PROJECT_LOCATION: .
      MODULE: app
      QA_VARIANT: qaRelease

    steps:
      # ⬇️ Checkout the source code from the repository
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      # ☕ Set up Java Development Kit (JDK) 17 for building the Android app
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      # 🛠️ Give Gradle permission to execute (important for Linux runners)
      - name: 🛠️ Make Gradle executable
        run: chmod +x ${{ env.PROJECT_LOCATION }}/gradlew

      - name: 🏷️ Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"
          if [[ "$BRANCH_NAME" == release/* ]]; then
            VERSION_NAME=${BRANCH_NAME#release/}
            echo "Extracted version: $VERSION_NAME"
            echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          else
            echo "No version found (not a release branch)"
            echo "VERSION_NAME=unknown" >> $GITHUB_ENV
          fi

      - name: 🔥 Show extracted version
        run: echo "The version extracted is $VERSION_NAME"

      # Set up the version code and name for the APK
      - name: 🆙 Update versionCode/versionName
        run: |
          ./gradlew -PversionCode=${{ github.run_number }} \
                    -PversionName="${{VERSION_NAME}}.${{github.run_number}}" \
                    clean


      # 📦 Build the APK for the specified QA variant
      - name: 📦 Build APK
        run: ./gradlew :${{ env.MODULE }}:assemble${{ env.QA_VARIANT }}

      # ✅ Run Android Lint checks for code quality
      - name: ✅ Run Lint
        run: ./gradlew lint${{ env.QA_VARIANT }}

      # 🧪 Run unit tests for the specified QA variant
      - name: 🧪 Run Unit Tests
        run: ./gradlew :${{ env.MODULE }}:test${{ env.QA_VARIANT }}UnitTest

      # 🔏 Decode the base64-encoded keystore and sign the unsigned APK
      - name: 🔏 Sign APK (if needed)
        if: env.KEYSTORE_BASE64 != ''
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo $KEYSTORE_BASE64 | base64 -d > my-keystore.jks
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore my-keystore.jks -storepass $KEYSTORE_PASSWORD -keypass $KEY_PASSWORD \
            ${{ env.PROJECT_LOCATION }}/${{ env.MODULE }}/build/outputs/apk/qa/release/app-qa-release-unsigned.apk \
            $KEY_ALIAS

      # 📦 Align the APK using zipalign to optimize it for memory efficiency and upload compatibility
      - name: 📦 Align APK
        run: |
          ZIPALIGN_PATH=$(find /usr/local/lib/android/sdk/build-tools -name zipalign | sort | tail -n 1)
          echo "Using zipalign from: $ZIPALIGN_PATH"
          $ZIPALIGN_PATH -v -p 4 ./app/build/outputs/apk/qa/release/app-qa-release-unsigned.apk ./app/build/outputs/apk/qa/release/app-qa-release-signed-aligned.apk

      # 🚀 Upload the final APK to Firebase App Distribution for internal testing
      - name: 🚀 Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: 1:238622179168:android:24853bdfaec1206d776805
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: development
          releaseNotes: ${{ github.event.head_commit.message }}
          file: ${{ env.PROJECT_LOCATION }}/${{ env.MODULE }}/build/outputs/apk/qa/release/app-qa-release-signed-aligned.apk

